@page "/transaction"

@using ExpenseWise2.Components.Model;
@using ExpenseWise2.Components.Service;

<body>
    <div class="transaction-container">
        <h1 class="title">Add Transaction</h1>

        @if (showConfirmDialog)
        {
            <div class="modal-overlay">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Confirm Transaction</h5>
                        </div>
                        <div class="modal-body">
                            <p>
                                This expense exceeds your current balance by
                                <strong>${@Math.Abs(currentBalance - Amount):F2}</strong>. Do you want to proceed?
                                The excess amount will be added as debt.
                            </p>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-secondary" @onclick="HandleNo">No</button>
                            <button class="btn btn-primary" @onclick="HandleYes">Yes</button>
                        </div>
                    </div>
                </div>
            </div>
        }

        @if (!string.IsNullOrEmpty(notificationMessage))
        {
            <div class="toast @notificationClass">
                <span>@notificationMessage</span>
                <button class="close-btn" @onclick="CloseNotification">×</button>
            </div>
        }

        <form id="transaction-form" @onsubmit="HandleTransactionSubmit" class="form">
            <div class="form-group">
                <label for="title">Title:</label>
                <input @bind="Title" type="text" class="form-control" id="title" placeholder="Enter title" />
            </div>

            <div class="form-group">
                <label for="type">Type:</label>
                <select @bind="TransactionTypes" class="form-control" id="type">
                    <option value="Income">Income</option>
                    <option value="Expense">Expense</option>
                    <option value="Debt">Debt</option>
                </select>
            </div>

            <div class="form-group">
                <label for="amount">Amount:</label>
                <input @bind="Amount" type="number" step="0.01" class="form-control" id="amount" placeholder="Enter amount" />
            </div>

            <div class="form-group">
                <label for="date">Date:</label>
                <input @bind="Date" type="date" id="date" class="form-control" />
            </div>

            <div class="form-group">
                <label for="tag">Tag:</label>
                <select @bind="Tag" class="form-control" id="tag">
                    <option value="RentYearly">RentYearly</option>
                    <option value="Monthly">Monthly</option>
                    <option value="Food">Food</option>
                    <option value="Drinks">Drinks</option>
                    <option value="Clothes">Clothes</option>
                    <option value="Gadgets">Gadgets</option>
                    <option value="Miscellaneous">Miscellaneous</option>
                    <option value="Fuel">Fuel</option>
                    <option value="Rent">Rent</option>
                    <option value="EMI">EMI</option>
                    <option value="Party">Party</option>
                    @foreach (var tag in tagsList)
                    {
                        <option value="@tag.Name">@tag.Name</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="notes">Notes:</label>
                <textarea @bind="Note" class="form-control" rows="3" placeholder="Enter notes"></textarea>
            </div>

            @if (TransactionTypes == "Debt")
            {
                <div class="form-group">
                    <label for="source">Source:</label>
                    <input @bind="Source" type="text" class="form-control" id="source" placeholder="Enter the source" />
                </div>

                <div class="form-group">
                    <label for="duedate">Due Date:</label>
                    <input @bind="DueDate" type="date" id="duedate" class="form-control" />
                </div>
            }

            <button type="submit" class="btn-submit">Add Transaction</button>
        </form>
    </div>
</body>

@code {
    private string TransactionTypes { get; set; } = "Income";
    private string Title { get; set; } = string.Empty;
    private double Amount { get; set; }
    private string Note { get; set; } = string.Empty;
    private DateTime Date { get; set; } = DateTime.Now;
    private DateTime DueDate { get; set; } = DateTime.Now;
    private string Source { get; set; } = string.Empty;
    private string Tag { get; set; } = "Monthly";

    private string notificationMessage = string.Empty;
    private string notificationClass = string.Empty;


    private bool showConfirmDialog = false;
    private double currentBalance = 0;


    private List<TagModel> tagsList = new();

    // Load tags on component initialization
    protected override async Task OnInitializedAsync()
    {
        await LoadTagsAsync();
    }

    private async Task LoadTagsAsync()
    {
        tagsList = TagService.GetTags();  // Ensure tags are loaded correctly
    }

    private void HandleTransactionSubmit()
    {
        if (TransactionTypes == "Expense")
        {
            currentBalance = TransactionService.GetBalance();
            if (Amount > currentBalance)
            {
                showConfirmDialog = true;
                return;
            }
        }

        try
        {
            CreateTransaction();
            ShowNotification("Transaction added successfully!", "success");
        }
        catch (Exception)
        {
            ShowNotification("Failed to add transaction. Please try again.", "error");
        }

    }

    private void HandleYes()
    {
        var debtAmount = Amount - currentBalance; // Calculate the debt amount
        var transaction = new TransactionModel(
            Title,
            currentBalance,  // Use current balance for the expense part
            Note,
            Date,
            DueDate,
            TransactionTypes == "Debt" ? Source : null,
            TransactionType.Debt,
            Tag
        );
        // Create debt transaction for the remaining amount
        TransactionService.CreateTransaction(transaction);

        // Create new debt transaction for the excess amount
        var excessTransaction = new TransactionModel(
            Title,
            debtAmount,  // The excess amount will be treated as debt
            Note,
            Date,
            DueDate,
            TransactionTypes == "Debt" ? Source : null,
            TransactionType.Debt,
            Tag
        );
        TransactionService.CreateTransaction(excessTransaction);

        showConfirmDialog = false; // Close the confirm dialog
        ShowNotification("Transaction added successfully with excess amount as debt.", "success");
        ResetForm();
    }

    private void HandleNo()
    {
        showConfirmDialog = false; // Close the confirm dialog without proceeding
    }

    private void CreateTransaction()
    {
        var transaction = new TransactionModel(
            Title,
            Amount,
            Note,
            Date,
            DueDate,
            TransactionTypes == "Debt" ? Source : null,
            Enum.Parse<TransactionType>(TransactionTypes),
            Tag
        );

        TransactionService.CreateTransaction(transaction);
        ResetForm();
    }

    private void ResetForm()
    {
        Title = string.Empty;
        Amount = 0;
        Note = string.Empty;
        Date = DateTime.Now;
        DueDate = DateTime.Now;
        Source = string.Empty;
        TransactionTypes = "Income";
        Tag = "Type New";
    }

    private void ShowNotification(string message, string type)
    {
        notificationMessage = message;
        notificationClass = type == "success" ? "toast-success" : "toast-error";
    }

    private void CloseNotification()
    {
        notificationMessage = string.Empty;
    }

}
